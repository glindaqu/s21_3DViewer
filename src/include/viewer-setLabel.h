#ifndef _VIEWER_SETLABEL_H
#define _VIEWER_SETLABEL_H

#include <epoxy/gl.h>
#include <gtk/gtk.h>

#include "parser.h"


/**
 * @struct AppData
 * @brief Структура, содержащая ссылку на виджет для отображения имени модели и
 * ссылку на структуру, хранящую информацию о модели.
 */
typedef struct {
  /// Указатель на виджет для отображения имени модели.
  GtkLabel *model_name_label;
  /// Указатель на структуру, хранящую информацию о модели.
  /// @see ObjFile_t
  ObjFile_t *obj_file;
} AppData;


/**
 * @brief Функция для форматирования целого числа в строку.
 *
 * @param number - целое число, которое необходимо отформатировать.
 * @return строку, содержащую отформатированное целое число.
 *
 * @details
 * Функция форматирует целое число в строку, используя символы 'K' для тысяч
 * и 'M' для миллионов.
 */
const char *format_number(int number);


/**
 * @brief Обновляет текст в метке, содержащей информацию о модели.
 *
 * @param self - указатель на структуру AppData, содержащую ссылки на виджет для
 * отображения имени модели и на структуру, хранящую информацию о модели.
 *
 * @details
 * Функция форматирует число вершин и ребер в модели в строки и использует их
 * для обновления текста в метке, содержащей информацию о модели. Если длина имени
 * файла больше 15 символов, то имя файла будет содержать только "*.obj".
 * Функция также вызывает функцию format_number для форматирования числа вершин
 * и ребер.
 */
void update_label_text(AppData *self);
#endif  // _VIEWER_SETLABEL_H
